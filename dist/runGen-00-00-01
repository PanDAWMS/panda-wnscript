#!/bin/bash

"exec" "python" "$0" "$@"

import os
import re
import sys
import time
import urllib
import getopt
import pickle
import commands
import threading

# error code
EC_MissingArg  = 10
EC_NoInput     = 11

print "=== start ==="
print time.ctime()

debugFlag    = False
libraries    = ''
outputFiles  = {}
jobParams    = ''
inputFiles   = ''
inputGUIDs   = []
oldPrefix    = ''
newPrefix    = ''
directIn     = False
lfcHost      = ''
envvarFile   = ''
liveLog      = ''
sourceURL    = 'https://gridui07.usatlas.bnl.gov:25443'

# command-line parameters
opts, args = getopt.getopt(sys.argv[1:], "i:o:r:j:l:p:u:",
                           ["pilotpars","debug","oldPrefix=","newPrefix=",
                            "directIn","sourceURL=","lfcHost=","envvarFile=",
			    "inputGUIDs=","liveLog="])
for o, a in opts:
    if o == "-l":
        libraries=a
    if o == "-j":
        scriptName=a
    if o == "-r":
        runDir=a
    if o == "-p":
        jobParams=urllib.unquote(a)
    if o == "-i":
        inputFiles=a
    if o == "-o":
        exec "outputFiles="+a
    if o == "--debug":
        debugFlag = True
    if o == "--inputGUIDs":
        exec "inputGUIDs="+a
    if o == "--oldPrefix":
        oldPrefix = a
    if o == "--newPrefix":
        newPrefix = a
    if o == "--directIn":
        directIn = True
    if o == "--lfcHost":
        lfcHost = a
    if o == "--liveLog":
        liveLog = a
    if o == "--sourceURL":
        sourceURL = a

# dump parameter
try:
    print "=== parameters ==="
    print libraries
    print runDir
    print jobParams
    print inputFiles
    print scriptName
    print outputFiles
    print inputGUIDs
    print oldPrefix
    print newPrefix
    print directIn
    print lfcHost
    print debugFlag
    print liveLog
    print sourceURL
    print "==================="
except:
    type, value, traceBack = sys.exc_info()
    print 'ERROR: missing parameters : %s - %s' % (type,value)
    sys.exit(EC_MissingArg)

# log watcher
class LogWatcher (threading.Thread):
    # onstructor
    def __init__(self,fileName,logName):
        threading.Thread.__init__(self)
        self.fileName = fileName
        self.logName  = logName
        self.offset   = 0
        self.lock     = threading.Lock()

    # terminate thread
    def terminate(self):
        self.lock.acquire()

    # main
    def run(self):
        print "start LogWatcher"
        while True:
            try:
                import zlib
                import socket
                import httplib
                import mimetools
                # read log
                logFH = open(self.fileName)
                logFH.seek(self.offset)
                logStr = logFH.read()
                logFH.close()
                # upload
                if len(logStr) != 0:
                    # compress
                    zStr = zlib.compress(logStr)
                    # construct HTTP request
                    boundary = mimetools.choose_boundary()
                    body  = '--%s\r\n' % boundary
                    body += 'Content-Disposition: form-data; name="file"; filename="%s"\r\n' % self.logName
                    body += 'Content-Type: application/octet-stream\r\n'
                    body += '\r\n' + zStr + '\r\n'
                    body += '--%s--\r\n\r\n' % boundary
                    headers = {'Content-Type': 'multipart/form-data; boundary=%s' % boundary,
                               'Content-Length': str(len(body))}
                    url = '%s/server/panda/updateLog' % sourceURL
                    match = re.search('[^:/]+://([^/]+)(/.+)',url)
                    host = match.group(1)
                    path = match.group(2)
                    # set timeout
                    socket.setdefaulttimeout(60)
                    # HTTPS connection
                    conn = httplib.HTTPSConnection(host)
                    conn.request('POST',path,body,headers)
                    resp = conn.getresponse()
                    data = resp.read()
                    conn.close()
                    print "updated LogWatcher at %s" % time.strftime('%Y-%m-%d %H:%M:%S',time.gmtime())
            except:
                type, value, traceBack = sys.exc_info()
                print 'failed to update LogWatcher %s - %s' % (type,value)
            # check lock
            if self.lock.acquire(0):
                self.lock.release()
                time.sleep(60)
            else:
                # terminate
		print "terminate LogWatcher"
                return


# decode inputFiles
if inputFiles != '':
    print "Before In : %s" % inputFiles
    match =re.search('(.*)\[(.+)\](.*)\[(.+)\]',inputFiles)
    if match != None:
        inputFiles=[]
        head = match.group(1)
        tail = match.group(3)
	body = match.group(2).split(',')
	attr = match.group(4).split(',')
        for idx in range(len(body)):
            lfn = '%s%s%s%s' % (head,body[idx],tail,attr[idx])
            inputFiles.append(lfn)
    else:
        inputFiles = [inputFiles]
    print "After In : %s" % inputFiles
else:
    inputFiles=[]


# get PFNs from LRC
def _getPFNsFromLRC (urlLRC,items,isGUID=True,old_prefix='',new_prefix=''):
    # old prefix for regex
    old_prefix_re = old_prefix.replace('?','\?')
    pfnMap = {}
    if len(items)>0:
        # get PoolFileCatalog
        iITEM = 0
        strITEMs = ''
        for item in items:
            iITEM += 1
            # make argument
            strITEMs += '%s ' % item
            if iITEM % 35 == 0 or iITEM == len(items):
                # get PoolFileCatalog
                strITEMs = strITEMs.rstrip()
                if isGUID:
                    data = {'guids':strITEMs}
                else:
                    data = {'lfns':strITEMs}                    
                # avoid too long argument
                strITEMs = ''
                # GET
                url = '%s/lrc/PoolFileCatalog?%s' % (urlLRC,urllib.urlencode(data))
                req = urllib2.Request(url)
                fd = urllib2.urlopen(req)
                out = fd.read()
                if out.startswith('Error'):
                    continue
                if not out.startswith('<?xml'):
                    continue
                # get SURLs
                try:
                    root  = xml.dom.minidom.parseString(out)
                    files = root.getElementsByTagName('File')
                    for file in files:
                        # get ID
                        id = str(file.getAttribute('ID'))
                        # get PFN node
                        physical = file.getElementsByTagName('physical')[0]
                        pfnNode  = physical.getElementsByTagName('pfn')[0]
                        # convert UTF8 to Raw
                        pfn = str(pfnNode.getAttribute('name'))
                        # remove :8443/srm/managerv1?SFN=
                        pfn = re.sub(':8443/srm/managerv1\?SFN=','',pfn)
                        if old_prefix=='':
                            # remove protocol and host
                            pfn = re.sub('^[^:]+://[^/]+','',pfn)
                            # remove redundant /
                            pfn = re.sub('^//','/',pfn)
                            # put dcache if /pnfs
                            if pfn.startswith('/pnfs'):
                                pfn = 'dcache:%s' % pfn
                        else:
                            # check matching
                            if re.search(old_prefix_re,pfn) == None:
                                continue
                            # replace prefix
                            pfn = re.sub(old_prefix_re,new_prefix,pfn)
                        # append
                        pfnMap[id] = pfn
                except:
                    pass
    return pfnMap

# get PFNs from LFC
lfcCommand = """
import os
import re
import sys
import pickle

# get PFNs from LFC
def _getPFNsFromLFC (lfc_host,items,old_prefix='',new_prefix=''):
    retVal = 0 
    pfnMap = {}
    # old prefix for regex
    old_prefix_re = old_prefix.replace('?','\?')
    # import lfc
    try:
        import lfc
    except:
        print "ERROR : cound not import lfc"
        retVal = 1
        return retVal,pfnMap
    # set LFC HOST
    os.environ['LFC_HOST'] = lfc_host
    # check bulk-operation
    if not hasattr(lfc,'lfc_getreplicas'):
        print "ERROR : bulk-ops is unsupported"
        retVal = 2        
        return retVal,pfnMap
    frList = []
    # set nGUID for bulk-ops
    nGUID = 100
    iGUID = 0
    mapLFN = {}
    listGUID = []
    # loop over all items
    for item in items:
        iGUID += 1
        listGUID.append(item)
        if iGUID % nGUID == 0 or iGUID == len(items):
            # get replica
            ret,resList = lfc.lfc_getreplicas(listGUID,'')
            if ret != 0:
                err_num = lfc.cvar.serrno
                err_string = lfc.sstrerror(err_num)
                print "ERROR : LFC access failure - %s" % err_string
            else:
                for fr in resList:
                    if fr != None and ((not hasattr(fr,'errcode')) or \
                                       (hasattr(fr,'errcode') and fr.errcode == 0)):
                        # skip empty or corrupted SFN 
                        print fr.sfn      
                        if fr.sfn == '' or re.search('[^\w\./\-\+\?:&=]',fr.sfn) != None:
                            if globalVerbose:
                                print "WARNING : wrong SFN '%s'" % fr.sfn
                            continue
                        # check matching
                        if old_prefix != '':
                            if re.search(old_prefix_re,fr.sfn) == None:
                                continue
                        guid = fr.guid
                        # use first one
                        if pfnMap.has_key(guid):
                            continue
                        if old_prefix == '':
                            # remove protocol and host
                            pfn = re.sub('[^:]+://[^/]+','',fr.sfn)
                            pfn = new_prefix + pfn
                        else:
                            pfn = re.sub(old_prefix_re,new_prefix,fr.sfn) 
                        # assign
                        pfnMap[guid] = pfn
            # reset                        
            listGUID = []
    # return        
    return retVal,pfnMap
"""

# scan LFC/LRC for direct reading
if directIn:
    if lfcHost != '':
        # get PFNs from LFC
        lfcPy = '%s/%s.py' % (os.getcwd(),commands.getoutput('uuidgen'))
        lfcOutPi = '%s/lfc.%s' % (os.getcwd(),commands.getoutput('uuidgen'))
	lfcPyFile = open(lfcPy,'w')
        lfcPyFile.write(lfcCommand+("""
st,out= _getPFNsFromLFC ('%s',%s,old_prefix='%s',new_prefix='%s')
outPickFile = open('%s','w')
pickle.dump(out,outPickFile)
outPickFile.close()
sys.exit(st)
""" % (lfcHost,inputGUIDs,oldPrefix,newPrefix,lfcOutPi)))
        lfcPyFile.close()
        # run LFC access in grid runtime
	lfcSh = '%s.sh' % commands.getoutput('uuidgen')
	if envvarFile != '':
            commands.getoutput('cat %s > %s' % (envvarFile,lfcSh))
        commands.getoutput('echo "python %s" >> %s' % (lfcPy,lfcSh))
        commands.getoutput('chmod +x %s' % lfcSh)
        tmpSt,tmpOut = commands.getstatusoutput('./%s' % lfcSh)
        print tmpSt
        print tmpOut
        if tmpSt == 0:
            lfcOutPiFile = open(lfcOutPi)
            directTmp = pickle.load(lfcOutPiFile)
            lfcOutPiFile.close()            
        else:
            directTmp = {}
    else:
        # get PFNs from LRC    
        directTmp = _getPFNsFromLRC (urlLRC,inputFiles+minbiasFiles+cavernFiles,
                                     isGUID=False,old_prefix=oldPrefix,
                                     new_prefix=newPrefix)
    # collect LFNs
    directPFNs = {}
    for id in directTmp.keys():
        lfn = directTmp[id].split('/')[-1]
        directPFNs[lfn] = directTmp[id]

# save current dir
currentDir = os.getcwd()
currentDirFiles = os.listdir('.')

print "Running in",currentDir

# crate work dir
workDir = currentDir+"/workDir"
commands.getoutput('rm -rf %s' % workDir)
os.makedirs(workDir)
os.chdir(workDir)

# expand libraries
if libraries == '':
    pass
elif libraries.startswith('/'):
    print commands.getoutput('tar xvfz %s' % libraries)
else:
    print commands.getoutput('tar xvfz %s/%s' % (currentDir,libraries))


# make rundir just in case
commands.getoutput('mkdir %s' % runDir)
# go to run dir
os.chdir(runDir)

# check input files
if inputFiles != []:
    print "=== check input files ==="
    newInputs = []
    for inputFile in inputFiles:
        # direct reading
        foundFlag = False
        if directIn:
            if directPFNs.has_key(inputFile):
                newInputs.append(directPFNs[inputFile])
                foundFlag = True
        else:
            # make symlinks to input files
            if inputFile in currentDirFiles:
                os.symlink('%s/%s' % (currentDir,inputFile),inputFile)
                newInputs.append(inputFile)
                foundFlag = True                
        if not foundFlag:
            print "%s not exist" % inputFile
    inputFiles = newInputs
    if len(inputFiles) == 0:
        print "ERROR : No input file is available"
        sys.exit(EC_NoInput)        
    print "=== New inputFiles ==="
    print inputFiles
            
            
            
# add current dir to PATH
os.environ['PATH'] = '.:'+os.environ['PATH']

print "=== env variables ==="
print commands.getoutput('env')
print
print "=== ls %s ===" % runDir
print commands.getoutput('ls -l')
print

# chmod +x just in case
commands.getoutput('chmod +x %s' % scriptName)
if scriptName == '':
    commands.getoutput('chmod +x %s' % jobParams.split()[0])

# construct command
com = "%s %s " % (scriptName,jobParams)

# append input files
if inputFiles != []:
    inStr = ''
    for inputFile in inputFiles:
        inStr += "%s," % inputFile
    inStr = inStr[:-1]
    # replace
    com = com.replace('%IN',inStr)

# temporary output to avoid MemeoryError
tmpOutput = 'tmp.stdout.%s' % commands.getoutput('uuidgen')
tmpStderr = 'tmp.stderr.%s' % commands.getoutput('uuidgen')


print "=== execute ==="
print com
# run athena
if not debugFlag:
    if liveLog != '':
        # create empty log
        commands.getstatusoutput('cat /dev/null > %s' % tmpOutput)
        # start watcher
        logWatcher = LogWatcher(tmpOutput,liveLog)
        logWatcher.start()
    # write stdout to tmp file
    com += ' > %s 2> %s' % (tmpOutput,tmpStderr)
    status,out = commands.getstatusoutput(com)
    print out
    status %= 255
    try:
        tmpOutFile = open(tmpOutput)
        for line in tmpOutFile:
            print line[:-1]
        tmpOutFile.close()
    except:
        pass
    try:
        tmpErrFile = open(tmpStderr)
        for line in tmpErrFile:
            print line[:-1]
        tmpErrFile.close()
    except:
        pass
    # print 'sh: line 1:  8278 Aborted'
    try:
        if status != 0:
            print out.split('\n')[-1]
    except:
        pass
    if liveLog != '':        
        # terminate watcher
        logWatcher.terminate()
        logWatcher.join()
else:
    status = os.system(com)

print
print "=== ls %s ===" % runDir
print commands.getoutput('ls -l')
print

# rename output files
for oldName,newName in outputFiles.iteritems():
    if oldName.find('*') != -1:
        # archive *
        print commands.getoutput('tar cvfz %s %s' % (newName,oldName))
    else:
        print commands.getoutput('mv %s %s' % (oldName,newName))


# copy results
for file in outputFiles.values():
    commands.getoutput('mv %s %s' % (file,currentDir))


# go back to current dir
os.chdir(currentDir)

print
print commands.getoutput('pwd')
print commands.getoutput('ls -l')

# remove work dir
if not debugFlag:
    commands.getoutput('rm -rf %s' % workDir)

# return
if status:
    print "execute script: Running script failed : StatusCode=%d" % status
    sys.exit(status)
else:
    print "execute script: Running script was successful"
    sys.exit(0)
